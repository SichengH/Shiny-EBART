x<-simu.curves(1000,"Normal",1)
x
g = NULL;
noise_flag <- 1; # Poisson noise
MLE.dat = MLE.se.logitp(x = x$data, g=g, reflect=FALSE, minobs=1, pseudocounts=0.5,
all=FALSE, center=FALSE, repara=TRUE, forcebin=FALSE, lm.approx=TRUE, disp="add")
MLE.dat = MLE.se.logitp(x = x$data, g=g, reflect=FALSE, minobs=1, pseudocounts=0.5, all=FALSE, center=FALSE, repara=TRUE, forcebin=FALSE, lm.approx=TRUE, disp="add")
reflect
reflect<-FALSE
reflect
MLE.dat = MLE.se.logitp(x = x$data, g=g, reflect=FALSE, minobs=1, pseudocounts=0.5, all=FALSE, center=FALSE, repara=TRUE, forcebin=FALSE, lm.approx=TRUE, disp="add")
overall.res = estimate.logp.overallintensity(x = x$data, g = g, read.depth = NULL)
overall.res = estimate.logp.overallintensity(x = x$data, g = g, read.depth = NULL)
str(x)
sum<-(1/3)^10
for(i in 1:100){
sum<-sum+(1/5.2)^i+(2/3)^i
}
sum
m<-matrix(c(0,0.2,0.1,0,0.7,0.8,1,0.1,0.1))
m
m<-matrix(c(0,0.2,0.1,0,0.7,0.8,1,0.1,0.1),nrow=3)
m
m^2
m<-m%*%m%*%m%*%m%*%m
m
m<-m%*%m%*%m%*%m%*%m
m<-m%*%m%*%m%*%m%*%m
m
source('~/.active-rstudio-document')
m2
m2<-%*%m2%*%m2%*%m2
m2<-m2%*%m2%*%m2%*%m2
m2<-m2%*%m2%*%m2%*%m2
m2<-m2%*%m2%*%m2%*%m2
m2<-m2%*%m2%*%m2%*%m2
m2<-m2%*%m2%*%m2%*%m2
m2<-m2%*%m2%*%m2%*%m2
m2<-m2%*%m2%*%m2%*%m2
m2
m2<-m2%*%m2%*%m2%*%m2
m2<-m2%*%m2%*%m2%*%m2
m2<-m2%*%m2%*%m2%*%m2
m2<-m2%*%m2%*%m2%*%m2
m2
source('~/.active-rstudio-document')
m2
source('~/.active-rstudio-document')
m2
m2<-m2%*%m2%*%m2%*%m2
m2<-m2%*%m2%*%m2%*%m2
m2<-m2%*%m2%*%m2%*%m2
m2<-m2%*%m2%*%m2%*%m2
m2<-m2%*%m2%*%m2%*%m2
m2<-m2%*%m2%*%m2%*%m2
m2
m<-matrix(c(1/4,0,0,0,1/4,1/2,3/4,0,1/4,1/2,1/4,0,1/4,0,0,1),nrow=4)
m<-m%*%m%*%m%*%m%*%m%*%m
m<-m%*%m%*%m%*%m%*%m%*%m
m<-m%*%m%*%m%*%m%*%m%*%m
m<-m%*%m%*%m%*%m%*%m%*%m
m<-m%*%m%*%m%*%m%*%m%*%m
m
n<-matrix(c(1/4,0,0,1/4,1/2,3/4,1/4,1/2,1/4),nrow=3)
n
n<-n%*%n%*%n%*%n
n<-n%*%n%*%n%*%n
n<-n%*%n%*%n%*%n
n
n<-n%*%n%*%n%*%n
n<-n%*%n%*%n%*%n
n
m<-matrix(c(1/4,0,0,0,1/4,1/2,3/4,0,1/4,1/2,1/4,0,1/4,0,0,1),nrow=4)
m
eigen(m)
a<-eigen(m)
a$vectors
b<-a$vectors
b
c<-solve(b)
a
x<-matrix(c(1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0),nrow=4)
x
b
c
b%*%x%*%c
a<-matrix(c(1,-1/2,-1/2,1),nrow=2)
a
b<-solve(a)
b
c<-diag(2)
c
c<-c/2
c
b%*%c
3.48*8
2^5+6^5
12^5
8^5
2^5*6^5
8^5*1.5^5
e
2^-2
2^-4
2^-2*2^-4
2^-6
a<-matrix(c(0,0,2/3,1/3,0,0,0,1,0),nrow=3)
b<-matrix(c(2/3,0,0,0,0,3/5),nrow=3)
a
b
i<-diag(3)
i
c<-i-a
c
d<-solve(c)
d
d%*%b
a<_matrix(c(0,0.2,0,0,0.7,0,1,0.1,1),nrow=3)
a<-matrix(c(0,0.2,0,0,0.7,0,1,0.1,1),nrow=3)
a
a<-matrix(c(0,0.2,0,0.7),nrow=2)
a
b<-matrix(c(1,0.1),nrow=2)
i<-diag(2)
c<-i-a
d<-solve(c)
d
d%*%b
d%*%i
l<-matrix(c(1,1),nrow=2)
d%*%l
a
m<-matrix(c(1/2,3/4,1/2,1/4),nrow=2)
m
m<-%*%m%*%m%*%m%*%m
m<-m%*%m%*%m%*%m%*%m
m<-m%*%m%*%m%*%m%*%m
m<-m%*%m%*%m%*%m%*%m
m<-m%*%m%*%m%*%m%*%m
m<-m%*%m%*%m%*%m%*%m
m
diag(2)
m<-matrix(c(0,0.2,0.1,0,0.7,0.8,1,0.1,0.1),nrow=3)
m
m<-m%*%m%*%m%*%m
m<-m%*%m%*%m%*%m
m<-m%*%m%*%m%*%m
m<-m%*%m%*%m%*%m
m<-m%*%m%*%m%*%m
m
library("bitops", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
gene_expression.A549.biorep1 <- read.delim("~/Downloads/RNAseq/gene_expression.A549.biorep1.tsv")
View(gene_expression.A549.biorep1)
ARID3A <- read.delim("~/Documents/ARID3A.train.labels.tsv")
View(ARID3A)
View(ARID3A)
ADRI3A[1:5]
View(ARID3A)
gene_expression.A549.biorep1 <- read.delim("~/Downloads/RNAseq/gene_expression.A549.biorep1.tsv",nrows=100)
ARID3A <- read.delim("~/Documents/ARID3A.train.labels.tsv")
ARID3A <- read.delim("~/Documents/ARID3A.train.labels.tsv",nrows = 1000)
ARID3A
set.seed()
help(set.seed)
set.seed(Sys.time())
rpois(1,1)
rgamma(1,0.5)
rgamma(1,0.5)
rgamma(1,0.5)
set.seed(5)
rgamma(1,0.5)
set.seed(5)
rgamma(1,0.5)
rgamma(1,0.5)
set.seed(5)
rgamma(1,0.5)
set.seed(5)
set.seed(Sys.time())
rgamma(1,0.5)
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("HMTree", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("Rcpp", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
x<-simu.curves(16,'Normal')
x
y<-simu.curves(16,"Normal")
y
set.seed(666)
x<-simu.curves(16,'Normal')
x
set.seed(666)
y<-simu.curves(16,"Normal")
y
x
x
noisy<-x$data
noisy
typeof(noisy)
length(noisy)
l<-16
v1<-rep(0,l)
v2<-rep(0,l)
v3<-rep(0,l)
v4<-rep(0,l)
v5<-rep(0,l)
v6<-rep(0,l)
v7<-rep(0,l)
v8<-rep(0,l)
v9<-rep(0,l)
v10<-rep(0,)
v10<-rep(0,l)
for(i in 1:l){
v1[i]<-d[i*10-9]
v2[i]<-d[i*10-8]
v3[i]<-d[i*10-7]
v4[i]<-d[i*10-6]
v5[i]<-d[i*10-5]
v6[i]<-d[i*10-4]
v7[i]<-d[i*10-3]
v8[i]<-d[i*10-2]
v9[i]<-d[i*10-1]
v10[i]<-d[i*10]
}
d<-noisy
for(i in 1:l){
v1[i]<-d[i*10-9]
v2[i]<-d[i*10-8]
v3[i]<-d[i*10-7]
v4[i]<-d[i*10-6]
v5[i]<-d[i*10-5]
v6[i]<-d[i*10-4]
v7[i]<-d[i*10-3]
v8[i]<-d[i*10-2]
v9[i]<-d[i*10-1]
v10[i]<-d[i*10]
}
v1
v10
d1<-data.frame(v1,v2,v3,v4,v5,v6,v7,v8,v9,v10)
d1
getwd()
write.table(d1,"noisy_16",sep = ' ',row.names = FALSE, col.names = FALSE)
write.table
write.table(d1,"noisy_16.txt",sep = ' ',row.names = FALSE, col.names = FALSE)
x <- gl(2, 4, 8)
levels(x)[1] <- "low"
levels(x)[2] <- "high"
levels(x)[2] <- "high"
x
x
x <- gl(2, 4, 8)
x
levels(x)[1] <- "low"
x
levels(x)
levels(x)[1]<-1
x
y<-c(1,1,2,2,3,3,3)
x
y
leves(y)[3]<-"three"
levels(y)[3]<-"three"
y
y<-c(1,1,2,2,3,3,3)
y
y
levels(x)[1]<-5
x
x
freq(x)
table(x)
lenght(x)
freq<-table(x)
f<-freq/8
f
f[1]
typeof(f)
x
y
list<-list(x,y)
list
list[1]
list[2]
unlist(list)
sex<-c(1,2,3)
gender<-sex
gender
x
as.character(x)
a<-as.character(x)
a
x
a[1]
1==1
a<-1==1
a
as.numeric(a)
b<-1==2
as.numeric(b)
l<-c(0,0,0,1,2,3)
l
l[-1]
l[1:5]
[! l %in% 0]
l[! l %in% 0]
l<-c(0,0,0,1,2,3)
l[! l %in% 0]
install.packages("MSstats")
help("MSstats")
??MSstats
library("RcppArmadillo", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("Rcpp", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("rcpp")
help("mat")
??mat
detach("package:RcppArmadillo", unload=TRUE)
library("RcppArmadillo", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Rcpp::sourceCpp('Desktop/rcpp.cpp')
Rcpp::sourceCpp('Desktop/rcpp.cpp')
Rcpp::sourceCpp('Desktop/rcpp.cpp')
Rcpp::sourceCpp('Desktop/rcpp.cpp')
Rcpp::sourceCpp('Desktop/rcpp.cpp')
Rcpp::sourceCpp('Desktop/rcpp.cpp')
Rcpp::sourceCpp('Desktop/rcpp.cpp')
Rcpp::sourceCpp('Desktop/rcpp.cpp')
Rcpp::sourceCpp('Desktop/rcpp.cpp')
cFunction()
Rcpp::sourceCpp('Desktop/rcpp.cpp')
install.packages("Mstats")
install.packages("msstates")
compileAttributes()
devtools::use_rcpp()
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
devtools::use_rcpp()
Rcpp::sourceCpp('Desktop/cpp/rcpp.cpp')
getwd()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
library("roxygen2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Rcpp::compileAttributes()
RcppArmadillo::armadillo_version()
devtools::load_all()
library("Rcpp", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("RcppArmadillo", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
devtools::load_all()
install.packages("RcppArmadillo")
library("HMTree", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("devtools")
source('~/Desktop/HMTree/docs/HMTree_demo.R')
source('~/Desktop/HMTree/docs/HMTree_demo.R')
denoised.pois<-HMTree.denoise_1D(res.pois)
install.packages("msstate")
install.packages("/Volumes/NO NAME/MayInstitute-P5-StatMS/MSstats_3.8.1.tar.gz", repos = NULL, type = "source")
install.packages("/Volumes/NO NAME/MayInstitute-P5-StatMS/MSstats_3.8.1.tar.gz", repos = NULL, type = "source")
install.packages("marry")
install.packages("limma")
install.packages("/Volumes/NO NAME/MayInstitute-P5-StatMS/MSstats_3.8.1.tar.gz", repos = NULL, type = "source")
install.packages("msstats")
?MSstats
install.packages("/Volumes/NO NAME/MayInstitute-P5-StatMS/MSstats_3.8.1.tar.gz", repos = NULL, type = "source")
install.packages("limma")
library(shiny); runApp('Desktop/ShinyTemp.R')
?read.csv
?read.csv
library("devtools")
library("Rcpp")
library("HMTree")
#Simulate Data
curve.length = 1024
model.mode = 'Poisson'
num.samples=1
set.seed(666)
res.pois = simu.curves(curve.length=curve.length, model.mode=model.mode, num.samples=num.samples)
curve.length = 1024
model.mode = 'Normal'
num.samples=1
normal.sigma=0.5
set.seed(666)
res.normal = simu.curves(curve.length=curve.length, model.mode=model.mode, num.samples=num.samples, normal.sigma=normal.sigma)
#After simulating data, you can get denoised objects by:
denoised.normal<-HMTree.denoise_1D(res.normal)
a
b
c
d
q
ls()
rm(list = ls())
ls()
library("devtools")
library("Rcpp")
library("HMTree")
#Simulate Data
curve.length = 1024
model.mode = 'Poisson'
num.samples=1
set.seed(666)
res.pois = simu.curves(curve.length=curve.length, model.mode=model.mode, num.samples=num.samples)
curve.length = 1024
model.mode = 'Normal'
num.samples=1
normal.sigma=0.5
set.seed(666)
res.normal = simu.curves(curve.length=curve.length, model.mode=model.mode, num.samples=num.samples, normal.sigma=normal.sigma)
#After simulating data, you can get denoised objects by:
denoised.normal<-HMTree.denoise_1D(res.normal)
rm(list = ls())
ls()
q()
q()
q()
docu
library("affy", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
shiny::runApp('Desktop/BIDMC/ShinyTemp_2')
runApp('Desktop/BIDMC/ShinyTemp_2')
runApp('Desktop/BIDMC/ShinyTemp_2')
runApp('Desktop/BIDMC/ShinyTemp_2')
runApp('Desktop/BIDMC/ShinyTemp_2')
shiny::runApp('Desktop/BIDMC/EBART')
runApp('Desktop/BIDMC/EBART')
runApp('Desktop/BIDMC/EBART')
runApp('Desktop/BIDMC/EBART')
runApp('Desktop/BIDMC/EBART')
runApp('Desktop/BIDMC/EBART')
getwd()
setwd("/Users/haosicheng/BIDMC/EBART")
setwd("/Users/haosicheng/BIDMC/EBART")
setwd("/Users/haosicheng/Desktop/BIDMC/EBART")
runApp()
wd
getwd()
runApp()
setwd("/Users/haosicheng")
runApp('Desktop/BIDMC/EBART')
runApp('Desktop/BIDMC/EBART')
runApp('Desktop/BIDMC/EBART')
runApp('Desktop/BIDMC/EBART')
runApp('Desktop/BIDMC/EBART')
runApp('Desktop/BIDMC/EBART')
runApp('Desktop/BIDMC/EBART')
runApp('Desktop/BIDMC/EBART')
runApp('Desktop/BIDMC/EBART')
runApp('Desktop/BIDMC/EBART')
runApp('Desktop/BIDMC/EBART')
dat()
dat
runApp('Desktop/BIDMC/EBART')
runApp('Desktop/BIDMC/EBART')
runApp('Desktop/BIDMC/EBART')
runApp('Desktop/BIDMC/EBART')
runApp('Desktop/BIDMC/EBART')
runApp('Desktop/BIDMC/EBART')
runApp('Desktop/BIDMC/EBART')
runApp('Desktop/BIDMC/EBART')
source('~/Desktop/BIDMC/DeconFunc4.r')
runApp('Desktop/BIDMC/EBART')
runApp('Desktop/BIDMC/EBART')
runApp('Desktop/BIDMC/EBART')
runApp('Desktop/BIDMC/EBART')
runApp('Desktop/BIDMC/EBART')
runApp('Desktop/BIDMC/EBART')
library("rsconnect", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
runApp('Desktop/BIDMC/EBART')
runApp('Desktop/BIDMC/EBART')
runApp('Desktop/BIDMC/EBART')
Shiny.data <- read.csv(paste0(wd,"/outputData.csv"))
getwd()
setwd("/Users/haosicheng/BIDMC/EBART")
setwd("/Users/haosicheng/Desktop/BIDMC/EBART")
wd<-getwd()
Shiny.data <- read.csv(paste0(wd,"/outputData.csv"))
Shiny.data<-Shiny.data[-c(1)]
dat<-Shiny.data
n.na<-sum(!is.na(dat$z))
n.na
n.na
n.na<-sum(is.na(dat$z))
na
n.na
n.99<-sum(dat$z>=99)
n.99
zvec<-dat$z[!is.na(dat$z) & dat$z<99]
zvec
length(zvec)
n.99<-sum(dat$z>=99&!is.na(dat$z))
n.99
runApp()
runApp()
runApp()
runApp()
Shiny.data
Shiny.data$samplesize<-NULL
Shiny.data[1]
View(Shiny.data)
write.csv(Shiny.data, file = "outputData.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
runApp()
runApp()
runApp()
